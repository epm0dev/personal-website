upstream backend {
    server production_api:4000;
}

server {
    listen 8000;
    location / {
        # Pre-flight CORS request handling adapted from the following example
        # https://gist.github.com/rhfung/12fced0c159572f5207a2da5b6ecdab1
        set $cors "";

        # Allow CORS requests from
        #  scheme    : http or https
        #  authority : localhost
        #  port      : nothing, or :
        if ($http_origin ~* ((http|https)?://[^/]*localhost(:[0-9]+)?)) {
            set $cors "true";
        }

        # OPTIONS indicates a CORS pre-flight request
        if ($request_method = 'OPTIONS') {
            set $cors "${cors}options";
        }

        # non-OPTIONS indicates a normal CORS request
        if ($request_method = 'GET') {
            set $cors "${cors}get";
        }
        if ($request_method = 'POST') {
            set $cors "${cors}post";
        }
        if ($request_method = 'PUT') {
            set $cors "${cors}put";
        }
        if ($request_method = 'PATCH') {
            set $cors "${cors}put";
        }
        if ($request_method = 'DELETE') {
            set $cors "${cors}delete";
        }

        # if it's a GET, POST, PUT, DELETE, set the standard CORS responses header
        if ($cors = "trueget") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
            add_header 'Access-Control-Allow-Credentials' 'true';
            # # Tell the browser which response headers the JS can see, besides the "simple response headers"
            # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
        }

        if ($cors = "truepost") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
            add_header 'Access-Control-Allow-Credentials' 'true';
            # # Tell the browser which response headers the JS can see, besides the "simple response headers"
            # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
        }

        if ($cors = "trueput") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
            add_header 'Access-Control-Allow-Credentials' 'true';
            # # Tell the browser which response headers the JS can see, besides the "simple response headers"
            # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
        }

        if ($cors = "truepatch") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
            add_header 'Access-Control-Allow-Credentials' 'true';
            # # Tell the browser which response headers the JS can see, besides the "simple response headers"
            # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
        }

        if ($cors = "truedelete") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
            add_header 'Access-Control-Allow-Credentials' 'true';
            # # Tell the browser which response headers the JS can see, besides the "simple response headers"
            # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
        }

        # if it's OPTIONS, then it's a CORS preflight request so respond immediately with no response body
        if ($cors = "trueoptions") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # in a preflight response, tells browser the subsequent actual request can include user credentials (e.g., cookies)
            add_header 'Access-Control-Allow-Credentials' 'true';

            #
            # Return special preflight info
            #

            # Tell browser to cache this pre-flight info for 20 days
            add_header 'Access-Control-Max-Age' 1728000;

            # Tell browser we respond to GET,POST,PUT,DELETE,OPTIONS in normal CORS requests.
            #
            # Not officially needed but still included to help non-conforming browsers.
            #
            # OPTIONS should not be needed here, since the field is used
            # to indicate methods allowed for "actual request" not the
            # preflight request.
            #
            # GET,POST also should not be needed, since the "simple
            # methods" GET,POST,HEAD are included by default.
            #
            # We should only need this header for non-simple requests
            # methods (e.g., DELETE), or custom request methods (e.g., XMODIFY)
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';

            # Tell browser we accept these headers in the actual request
            # The bottom line: it seems there are headers needed for the
            # web and CORS to work, which at the moment you should
            # hard-code into Access-Control-Allow-Headers, although
            # official specs imply this should not be necessary.
            #
            add_header 'Access-Control-Allow-Headers' 'Access-Control-Request-Method,Access-Control-Request-Headers,Cache,Pragma,Authorization,Accept,Accept-Encoding,Accept-Language,Host,Referer,Content-Length,Origin,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            # build entire response to the preflight request
            # no body in this response
            add_header 'Content-Length' 0;
            # (should not be necessary, but included for non-conforming browsers)
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            # indicate successful return with no content
            return 204;
        }

        proxy_pass http://backend;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
    }
    location /static/ {
        alias /vol/web/;
    }
    location /media/ {
        alias /vol/web/;
    }
}